{"ast":null,"code":"var _jsxFileName = \"/Users/mirandaebraheim/Documents/Other/demos/src/scene/DataTableScene.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DataTable from \"../components/table/DataTable\";\nimport { mockData, tableColumns } from \"../data/MockData\";\nimport Box from \"@material-ui/core/Box\";\nimport _ from \"lodash\";\nimport IconInput from \"../components/inputs/IconInput\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { paginate } from \"../utils/paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataTableScene = () => {\n  _s();\n\n  // const [data, setData] = useState(mockData);\n  const [columns, setColumns] = useState(tableColumns);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"first_name\",\n    order: \"asc\"\n  });\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [pageSize, setPageSize] = useState(10); // const [totalLength, setLength] = useState(mockData.length);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const {\n    totalCount,\n    data\n  } = useTableSearch({\n    mockData,\n    searchQuery,\n    pageSize,\n    sortColumn,\n    currentPage\n  });\n\n  const handleSortColumn = sortCol => {\n    setSortColumn({\n      path: sortCol.path,\n      order: sortCol.order\n    });\n  };\n\n  const handleSearch = e => {\n    const value = e.target.value;\n\n    if (value === \"\") {\n      // setData(mockData);\n      setCurrentPage(1);\n    }\n\n    setSearchQuery(value);\n  };\n\n  const handleChangePage = (e, newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = e => {\n    setPageSize(e.target.value);\n    setCurrentPage(1);\n  }; // useEffect(() => {\n  //   let filtered = [...mockData];\n  //   const search = new RegExp(searchQuery, \"igm\");\n  //   if (searchQuery !== \"\") {\n  //     filtered = filtered.filter(\n  //       (people) =>\n  //         people.first_name.match(search) ||\n  //         people.last_name.match(search) ||\n  //         people.email.match(search) ||\n  //         people.city.match(search) ||\n  //         people.state.match(search)\n  //     );\n  //   }\n  //   const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n  //   // const people = paginate(sorted, currentPage, pageSize);\n  //   setData([...sorted]);\n  //   // setLength(sorted.length);\n  // }, [mockData, searchQuery, sortColumn, pageSize, currentPage]);\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    margin: \"16px\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: /*#__PURE__*/_jsxDEV(IconInput, {\n        id: \"search-data-table\",\n        label: \"Search\",\n        value: searchQuery,\n        iconPosition: \"start\",\n        iconButtonLabel: \"search\",\n        icon: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this),\n        handleChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data,\n      columns: columns,\n      pageSize: pageSize,\n      currentPage: currentPage,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      sortColumn: sortColumn,\n      handleSort: handleSortColumn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataTableScene, \"YzpEScu1ruPgne/0KzB9H4CLYgw=\", true);\n\n_c = DataTableScene;\nexport default DataTableScene;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableScene\");","map":{"version":3,"sources":["/Users/mirandaebraheim/Documents/Other/demos/src/scene/DataTableScene.jsx"],"names":["React","useState","useEffect","DataTable","mockData","tableColumns","Box","_","IconInput","SearchIcon","paginate","DataTableScene","columns","setColumns","sortColumn","setSortColumn","path","order","searchQuery","setSearchQuery","pageSize","setPageSize","currentPage","setCurrentPage","totalCount","data","useTableSearch","handleSortColumn","sortCol","handleSearch","e","value","target","handleChangePage","newPage","handleChangeRowsPerPage","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DataTable from \"../components/table/DataTable\";\nimport { mockData, tableColumns } from \"../data/MockData\";\nimport Box from \"@material-ui/core/Box\";\nimport _ from \"lodash\";\nimport IconInput from \"../components/inputs/IconInput\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { paginate } from \"../utils/paginate\";\nconst DataTableScene = () => {\n  // const [data, setData] = useState(mockData);\n  const [columns, setColumns] = useState(tableColumns);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"first_name\",\n    order: \"asc\",\n  });\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [pageSize, setPageSize] = useState(10);\n  // const [totalLength, setLength] = useState(mockData.length);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const { totalCount, data } = useTableSearch({\n    mockData,\n    searchQuery,\n    pageSize,\n    sortColumn,\n    currentPage,\n  });\n  const handleSortColumn = (sortCol) => {\n    setSortColumn({ path: sortCol.path, order: sortCol.order });\n  };\n  const handleSearch = (e) => {\n    const value = e.target.value;\n    if (value === \"\") {\n      // setData(mockData);\n      setCurrentPage(1);\n    }\n    setSearchQuery(value);\n  };\n  const handleChangePage = (e, newPage) => {\n    setCurrentPage(newPage);\n  };\n  const handleChangeRowsPerPage = (e) => {\n    setPageSize(e.target.value);\n    setCurrentPage(1);\n  };\n  // useEffect(() => {\n  //   let filtered = [...mockData];\n  //   const search = new RegExp(searchQuery, \"igm\");\n  //   if (searchQuery !== \"\") {\n  //     filtered = filtered.filter(\n  //       (people) =>\n  //         people.first_name.match(search) ||\n  //         people.last_name.match(search) ||\n  //         people.email.match(search) ||\n  //         people.city.match(search) ||\n  //         people.state.match(search)\n  //     );\n  //   }\n  //   const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n  //   // const people = paginate(sorted, currentPage, pageSize);\n  //   setData([...sorted]);\n  //   // setLength(sorted.length);\n  // }, [mockData, searchQuery, sortColumn, pageSize, currentPage]);\n\n  return (\n    <Box margin=\"16px\">\n      <div style={{ display: \"flex\" }}>\n        <IconInput\n          id={\"search-data-table\"}\n          label={\"Search\"}\n          value={searchQuery}\n          iconPosition={\"start\"}\n          iconButtonLabel={\"search\"}\n          icon={<SearchIcon />}\n          handleChange={handleSearch}\n        />\n      </div>\n\n      <DataTable\n        data={data}\n        columns={columns}\n        pageSize={pageSize}\n        currentPage={currentPage}\n        handleChangePage={handleChangePage}\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\n        sortColumn={sortColumn}\n        handleSort={handleSortColumn}\n      />\n    </Box>\n  );\n};\n\nexport default DataTableScene;\n"]},"metadata":{},"sourceType":"module"}