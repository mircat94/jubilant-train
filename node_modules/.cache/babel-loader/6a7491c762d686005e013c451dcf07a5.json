{"ast":null,"code":"var _jsxFileName = \"/Users/mirandaebraheim/Documents/Other/demos/src/scene/DataTableScene.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DataTable from \"../components/table/DataTable\";\nimport { mockData, tableColumns } from \"../data/MockData\";\nimport Box from \"@material-ui/core/Box\";\nimport _ from \"lodash\";\nimport IconInput from \"../components/inputs/IconInput\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataTableScene = () => {\n  _s();\n\n  const [data, setData] = useState(mockData);\n  const [columns, setColumns] = useState(tableColumns);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"first_name\",\n    order: \"asc\"\n  });\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const handleSortColumn = sortCol => {\n    setSortColumn({\n      path: sortCol.path,\n      order: sortCol.order\n    });\n  };\n\n  const handleSearch = e => {\n    const value = e.target.value;\n\n    if (value === \"\") {\n      setData(mockData);\n    }\n\n    setSearchQuery(value);\n  };\n\n  const handleChangePage = (e, newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = e => {\n    setPageSize(e.target.value);\n  };\n\n  useEffect(() => {\n    let filtered = [...mockData];\n    const search = new RegExp(searchQuery, \"igm\");\n\n    if (searchQuery !== \"\") {\n      filtered = filtered.filter(people => people.first_name.match(search) || people.last_name.match(search) || people.email.match(search) || people.city.match(search) || people.state.match(search));\n    }\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    setData([...sorted]);\n  }, [mockData, searchQuery, sortColumn]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    margin: \"16px\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: /*#__PURE__*/_jsxDEV(IconInput, {\n        id: \"search-data-table\",\n        label: \"Search\",\n        value: searchQuery,\n        iconPosition: \"start\",\n        iconButtonLabel: \"search\",\n        icon: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this),\n        handleChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data,\n      columns: columns,\n      pageSize: pageSize,\n      currentPage: currentPage,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      sortColumn: sortColumn,\n      handleSort: handleSortColumn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataTableScene, \"vMoXMcPesNbaOpg76g1PFKXq8qA=\");\n\n_c = DataTableScene;\nexport default DataTableScene;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableScene\");","map":{"version":3,"sources":["/Users/mirandaebraheim/Documents/Other/demos/src/scene/DataTableScene.jsx"],"names":["React","useState","useEffect","DataTable","mockData","tableColumns","Box","_","IconInput","SearchIcon","DataTableScene","data","setData","columns","setColumns","sortColumn","setSortColumn","path","order","searchQuery","setSearchQuery","pageSize","setPageSize","currentPage","setCurrentPage","handleSortColumn","sortCol","handleSearch","e","value","target","handleChangePage","newPage","handleChangeRowsPerPage","filtered","search","RegExp","filter","people","first_name","match","last_name","email","city","state","sorted","orderBy","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DataTable from \"../components/table/DataTable\";\nimport { mockData, tableColumns } from \"../data/MockData\";\nimport Box from \"@material-ui/core/Box\";\nimport _ from \"lodash\";\nimport IconInput from \"../components/inputs/IconInput\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst DataTableScene = () => {\n  const [data, setData] = useState(mockData);\n  const [columns, setColumns] = useState(tableColumns);\n  const [sortColumn, setSortColumn] = useState({\n    path: \"first_name\",\n    order: \"asc\",\n  });\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  const handleSortColumn = (sortCol) => {\n    setSortColumn({ path: sortCol.path, order: sortCol.order });\n  };\n  const handleSearch = (e) => {\n    const value = e.target.value;\n    if (value === \"\") {\n      setData(mockData);\n    }\n    setSearchQuery(value);\n  };\n  const handleChangePage = (e, newPage) => {\n    setCurrentPage(newPage);\n  };\n  const handleChangeRowsPerPage = (e) => {\n    setPageSize(e.target.value);\n  };\n  useEffect(() => {\n    let filtered = [...mockData];\n    const search = new RegExp(searchQuery, \"igm\");\n    if (searchQuery !== \"\") {\n      filtered = filtered.filter(\n        (people) =>\n          people.first_name.match(search) ||\n          people.last_name.match(search) ||\n          people.email.match(search) ||\n          people.city.match(search) ||\n          people.state.match(search)\n      );\n    }\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    setData([...sorted]);\n  }, [mockData, searchQuery, sortColumn]);\n\n  return (\n    <Box margin=\"16px\">\n      <div style={{ display: \"flex\" }}>\n        <IconInput\n          id={\"search-data-table\"}\n          label={\"Search\"}\n          value={searchQuery}\n          iconPosition={\"start\"}\n          iconButtonLabel={\"search\"}\n          icon={<SearchIcon />}\n          handleChange={handleSearch}\n        />\n      </div>\n\n      <DataTable\n        data={data}\n        columns={columns}\n        pageSize={pageSize}\n        currentPage={currentPage}\n        handleChangePage={handleChangePage}\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\n        sortColumn={sortColumn}\n        handleSort={handleSortColumn}\n      />\n    </Box>\n  );\n};\n\nexport default DataTableScene;\n"]},"metadata":{},"sourceType":"module"}